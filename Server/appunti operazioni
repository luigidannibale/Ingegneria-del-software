
------------------------------------------------------
operazione new_game codice 101:
input expected = {
	time_duration: x,
	time_increment: y,
	black : u_id_1,
	white : u_id_2
} |
  | int : x,y,u_id_1,u_id_2

output expected = {
	game_id = g_id
} |
  | int g_id
{
	operations expected:
	- create game with:
		game_id = g_id,
		time_duration: x,
		time_increment: y,
		black : u_id_1,
		white : u_id_2,
		moves : empty{}
		esito : null
		motivo : null
}
------------------------------------------------------
operazione search_opponent codice 102:
input expected = {
	time_duration: x,
	time_increment: y
} |
  | int : x,y

output expected = {
	wait_code : c
} |
  | int c
------------------------------------------------------
operazione update_game codice 202:
input expected = {
	game_id : g_id,
	moves : {}
	esito : e
	motivo : m
} |
  | int : x,y
  | esito : e as enum("W","D","B","NF")
  | motivo : m as enum("checkmate","wonOnTime","quitmate","stalemate","insufficientMaterial","threefoldRepetition,"50moveRule","NF") 
  | v.esito e -> m : 1|3-> 1|2|3, 2-> 4,5,6,7, 4 -> 8

output expected = {
	game_id : g_id
} |
  | int g_id
{
	operations expected:
	- update game with:
		time_duration: x,
		time_increment: y,
		black : u_id_1,
		white : u_id_2,
		moves : empty{}
		esito : null
		motivo : null
			where game_id = g_id
}
------------------------------------------------------
operazione search_game codice 105:
input expected = {
	game_id : g_id
} |
  | int : g_id

output expected = {
	game : g
} |
  | Game g
{
	operations expected:
	return (select *
			from Game g
			where g.id = g_id)
}

Iscrizione(dati utente, preferenze* ) : utente, preferenza
Modifica-utente(id utente, dati da modificare) : utente
Disiscrizione(id utente) : bool
AggiornaPreferenza(id utente, preferenze): preferenza

